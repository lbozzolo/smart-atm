"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/calls/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPCAPolicy: function() { return /* binding */ createPCAPolicy; },\n/* harmony export */   diagnosePCAAccess: function() { return /* binding */ diagnosePCAAccess; },\n/* harmony export */   getAllPCA: function() { return /* binding */ getAllPCA; },\n/* harmony export */   getCallCountByPhone: function() { return /* binding */ getCallCountByPhone; },\n/* harmony export */   getCallDetailsWithPCA: function() { return /* binding */ getCallDetailsWithPCA; },\n/* harmony export */   getCallHistoryByPhone: function() { return /* binding */ getCallHistoryByPhone; },\n/* harmony export */   getCallbacksByCallId: function() { return /* binding */ getCallbacksByCallId; },\n/* harmony export */   getCalls: function() { return /* binding */ getCalls; },\n/* harmony export */   getCallsWithPCAInfo: function() { return /* binding */ getCallsWithPCAInfo; },\n/* harmony export */   getCallsWithPagination: function() { return /* binding */ getCallsWithPagination; },\n/* harmony export */   getLeads: function() { return /* binding */ getLeads; },\n/* harmony export */   getPCAByCallId: function() { return /* binding */ getPCAByCallId; },\n/* harmony export */   hasCallHistory: function() { return /* binding */ hasCallHistory; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; },\n/* harmony export */   testAllTablesAccess: function() { return /* binding */ testAllTablesAccess; },\n/* harmony export */   testPCAAccess: function() { return /* binding */ testPCAAccess; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://rchgtacvdpavqkrceybo.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJjaGd0YWN2ZHBhdnFrcmNleWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2OTUyODksImV4cCI6MjA3NjI3MTI4OX0.KZHdrA5sOrrDOUkMkG7H5b6Eb-yxPmrZQVXVBCuKVgg\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Función para obtener todas las llamadas\nasync function getCalls() {\n    const { data, error } = await supabase.from(\"calls\").select(\"*\").order(\"call_id\", {\n        ascending: false\n    });\n    if (error) {\n        throw error;\n    }\n    return data;\n}\n// Función para obtener llamadas con información de si tienen PCA\nasync function getCallsWithPCAInfo() {\n    try {\n        // Primero obtenemos todas las llamadas\n        const { data: calls, error: callsError } = await supabase.from(\"calls\").select(\"*\").order(\"call_id\", {\n            ascending: false\n        });\n        if (callsError) {\n            console.error(\"Error fetching calls:\", callsError);\n            throw callsError;\n        }\n        if (!calls) return [];\n        // Luego obtenemos todos los call_ids que tienen PCA\n        const { data: pcaData, error: pcaError } = await supabase.from(\"pca\").select(\"call_id\");\n        if (pcaError) {\n            console.error(\"Error fetching PCA data:\", pcaError);\n        // No lanzamos error aquí, solo logueamos y continuamos sin PCA info\n        }\n        const callsWithPCA = new Set((pcaData === null || pcaData === void 0 ? void 0 : pcaData.map((pca)=>pca.call_id)) || []);\n        // Combinamos la información\n        return calls.map((call)=>({\n                ...call,\n                hasPCA: callsWithPCA.has(call.call_id),\n                hasCallbacks: false // Ya no usamos callbacks como concepto\n            }));\n    } catch (error) {\n        console.error(\"Error in getCallsWithPCAInfo:\", error);\n        throw error;\n    }\n}\n// Función NUEVA: Obtener llamadas con paginación en servidor (ESCALABLE)\nasync function getCallsWithPagination(params) {\n    try {\n        var _params_filters, _params_filters1;\n        console.log(\"\\uD83D\\uDD0D Obteniendo llamadas paginadas:\", params);\n        let query = supabase.from(\"calls\").select(\"*\", {\n            count: \"exact\"\n        });\n        // Aplicar filtros de búsqueda\n        if (params.search) {\n            query = query.or(\"business_name.ilike.%\".concat(params.search, \"%,owner_name.ilike.%\").concat(params.search, \"%,owner_phone.ilike.%\").concat(params.search, \"%\"));\n        }\n        // Aplicar filtros adicionales\n        if ((_params_filters = params.filters) === null || _params_filters === void 0 ? void 0 : _params_filters.disposition) {\n            query = query.eq(\"disposition\", params.filters.disposition);\n        }\n        // Aplicar ordenamiento\n        const sortBy = params.sortBy || \"call_id\";\n        const sortOrder = params.sortOrder === \"asc\" ? {\n            ascending: true\n        } : {\n            ascending: false\n        };\n        query = query.order(sortBy, sortOrder);\n        // Aplicar paginación\n        const offset = (params.page - 1) * params.limit;\n        query = query.range(offset, offset + params.limit - 1);\n        const { data: calls, count, error: callsError } = await query;\n        if (callsError) {\n            console.error(\"Error fetching paginated calls:\", callsError);\n            throw callsError;\n        }\n        if (!calls || calls.length === 0) {\n            return {\n                data: [],\n                total: count || 0,\n                page: params.page,\n                limit: params.limit,\n                totalPages: Math.ceil((count || 0) / params.limit)\n            };\n        }\n        // Obtener información de PCA solo para las llamadas de esta página\n        const callIds = calls.map((call)=>call.call_id);\n        const { data: pcaData, error: pcaError } = await supabase.from(\"pca\").select(\"call_id\").in(\"call_id\", callIds);\n        if (pcaError) {\n            console.error(\"Error fetching PCA data:\", pcaError);\n        }\n        const callsWithPCA = new Set((pcaData === null || pcaData === void 0 ? void 0 : pcaData.map((pca)=>pca.call_id)) || []);\n        // Combinar información\n        const callsWithInfo = calls.map((call)=>({\n                ...call,\n                hasPCA: callsWithPCA.has(call.call_id),\n                hasCallbacks: false\n            }));\n        // Aplicar filtros post-query si es necesario\n        let filteredCalls = callsWithInfo;\n        if (((_params_filters1 = params.filters) === null || _params_filters1 === void 0 ? void 0 : _params_filters1.hasPCA) !== undefined) {\n            filteredCalls = filteredCalls.filter((call)=>call.hasPCA === params.filters.hasPCA);\n        }\n        const totalPages = Math.ceil((count || 0) / params.limit);\n        console.log(\"✅ Devolviendo \".concat(filteredCalls.length, \" llamadas (p\\xe1gina \").concat(params.page, \"/\").concat(totalPages, \") de \").concat(count, \" total\"));\n        return {\n            data: filteredCalls,\n            total: count || 0,\n            page: params.page,\n            limit: params.limit,\n            totalPages\n        };\n    } catch (error) {\n        console.error(\"Error in getCallsWithPagination:\", error);\n        throw error;\n    }\n}\n// Función para obtener callbacks por call_id\nasync function getCallbacksByCallId(callId) {\n    try {\n        const { data, error } = await supabase.from(\"callbacks\").select(\"*\").eq(\"call_id\", callId).order(\"callback_date\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching callbacks:\", error);\n            throw error;\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error in getCallbacksByCallId:\", error);\n        throw error;\n    }\n}\n// Función para obtener análisis PCA por call_id\nasync function getPCAByCallId(callId) {\n    try {\n        const { data, error } = await supabase.from(\"pca\").select(\"*\").eq(\"call_id\", callId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching PCA data:\", error);\n            throw error;\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error in getPCAByCallId:\", error);\n        throw error;\n    }\n}\n// Nueva función para obtener información completa del cliente y análisis (calls y callbacks)\nasync function getCallDetailsWithPCA(callId) {\n    try {\n        console.log(\"\\uD83D\\uDD0D getCallDetailsWithPCA - buscando callId:\", callId);\n        // Obtener la llamada (siempre existe)\n        const { data: callData, error: callError } = await supabase.from(\"calls\").select(\"*\").eq(\"call_id\", callId).single();\n        console.log(\"\\uD83D\\uDCDE Resultado b\\xfasqueda en calls:\", {\n            callData,\n            callError\n        });\n        if (callError || !callData) {\n            console.error(\"❌ No se encontr\\xf3 la call con ID:\", callId);\n            return {\n                call: null,\n                pca: [],\n                isCallback: false\n            };\n        }\n        // Verificar si esta call tiene un callback asociado\n        const { data: callbackData, error: callbackError } = await supabase.from(\"callbacks\").select(\"*\").eq(\"call_id\", callId).single();\n        console.log(\"� Verificando si tiene callback asociado:\", {\n            callbackData,\n            callbackError\n        });\n        // Obtener PCA\n        const pcaData = await getPCAByCallId(callId);\n        if (callbackData && !callbackError) {\n            // Es una call que TAMBIÉN es un callback\n            console.log(\"✅ Call con callback asociado encontrado\");\n            return {\n                call: callData,\n                pca: pcaData,\n                isCallback: true,\n                callback: callbackData\n            };\n        } else {\n            // Es una call normal (sin callback)\n            console.log(\"✅ Call normal (sin callback)\");\n            return {\n                call: callData,\n                pca: pcaData,\n                isCallback: false\n            };\n        }\n    } catch (error) {\n        console.error(\"❌ Error in getCallDetailsWithPCA:\", error);\n        throw error;\n    }\n}\n// Función de debug para ver todos los PCA disponibles\nasync function getAllPCA() {\n    console.log(\"Intentando obtener todos los PCA...\");\n    // Primero intentamos sin límites\n    const { data, error, status, statusText } = await supabase.from(\"pca\").select(\"id, call_id, agent_name, created_at\").order(\"created_at\", {\n        ascending: false\n    });\n    console.log(\"Respuesta PCA:\", {\n        data,\n        error,\n        status,\n        statusText,\n        dataLength: (data === null || data === void 0 ? void 0 : data.length) || 0\n    });\n    if (error) {\n        console.error(\"Error detallado al obtener PCA:\", {\n            message: error.message,\n            details: error.details,\n            hint: error.hint,\n            code: error.code\n        });\n        // Intentamos con un query más simple\n        console.log(\"Intentando query m\\xe1s simple...\");\n        const { data: simpleData, error: simpleError } = await supabase.from(\"pca\").select(\"*\").limit(1);\n        console.log(\"Query simple resultado:\", {\n            simpleData,\n            simpleError\n        });\n        throw error;\n    }\n    console.log(\"PCA obtenidos exitosamente:\", data);\n    return data;\n}\n// Función de debug simple para verificar acceso a PCA\nasync function testPCAAccess() {\n    console.log(\"Testeando acceso a tabla PCA...\");\n    const { data, error, count } = await supabase.from(\"pca\").select(\"*\", {\n        count: \"exact\",\n        head: true\n    });\n    console.log(\"Test PCA - Count:\", count, \"Error:\", error);\n    return {\n        count,\n        error\n    };\n}\n// Función para verificar todas las tablas disponibles\nasync function testAllTablesAccess() {\n    const tables = [\n        \"calls\",\n        \"pca\",\n        \"callbacks\"\n    ];\n    const results = {};\n    for (const table of tables){\n        try {\n            console.log(\"Testeando tabla: \".concat(table));\n            const { data, error, count } = await supabase.from(table).select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            results[table] = {\n                count,\n                error: (error === null || error === void 0 ? void 0 : error.message) || null\n            };\n            console.log(\"\".concat(table, \": \").concat(count, \" registros, error:\"), error === null || error === void 0 ? void 0 : error.message);\n        } catch (err) {\n            const errorMessage = err instanceof Error ? err.message : \"Error desconocido\";\n            results[table] = {\n                count: 0,\n                error: errorMessage\n            };\n            console.error(\"Error en tabla \".concat(table, \":\"), err);\n        }\n    }\n    return results;\n}\n// Función específica para diagnosticar el problema de PCA\nasync function diagnosePCAAccess() {\n    console.log(\"\\uD83D\\uDD0D Diagnosticando acceso a tabla PCA...\");\n    const tests = [];\n    // Test 1: Count básico\n    try {\n        const { count, error } = await supabase.from(\"pca\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        tests.push({\n            test: \"Count b\\xe1sico\",\n            success: !error,\n            result: \"Count: \".concat(count),\n            error: error === null || error === void 0 ? void 0 : error.message\n        });\n    } catch (err) {\n        tests.push({\n            test: \"Count b\\xe1sico\",\n            success: false,\n            result: \"Excepci\\xf3n\",\n            error: err instanceof Error ? err.message : \"Error desconocido\"\n        });\n    }\n    // Test 2: Select simple con límite\n    try {\n        const { data, error } = await supabase.from(\"pca\").select(\"id\").limit(1);\n        tests.push({\n            test: \"Select simple (limit 1)\",\n            success: !error,\n            result: \"Registros: \".concat((data === null || data === void 0 ? void 0 : data.length) || 0),\n            error: error === null || error === void 0 ? void 0 : error.message\n        });\n    } catch (err) {\n        tests.push({\n            test: \"Select simple (limit 1)\",\n            success: false,\n            result: \"Excepci\\xf3n\",\n            error: err instanceof Error ? err.message : \"Error desconocido\"\n        });\n    }\n    // Test 3: Select específico\n    try {\n        const { data, error } = await supabase.from(\"pca\").select(\"id, call_id\").limit(3);\n        tests.push({\n            test: \"Select espec\\xedfico (id, call_id)\",\n            success: !error,\n            result: \"Registros: \".concat((data === null || data === void 0 ? void 0 : data.length) || 0),\n            error: error === null || error === void 0 ? void 0 : error.message,\n            sampleData: data\n        });\n    } catch (err) {\n        tests.push({\n            test: \"Select espec\\xedfico (id, call_id)\",\n            success: false,\n            result: \"Excepci\\xf3n\",\n            error: err instanceof Error ? err.message : \"Error desconocido\"\n        });\n    }\n    // Test 4: Verificar si RLS está causando el problema\n    try {\n        // Intentamos hacer un query con bypass de RLS si es posible\n        const { data, error } = await supabase.rpc(\"get_pca_count\") // Esta función no existe, pero el error nos dará información\n        ;\n        tests.push({\n            test: \"Test RPC (para verificar RLS)\",\n            success: !error,\n            result: \"RPC call\",\n            error: error === null || error === void 0 ? void 0 : error.message\n        });\n    } catch (err) {\n        tests.push({\n            test: \"Test RPC (para verificar RLS)\",\n            success: false,\n            result: \"RPC no disponible\",\n            error: err instanceof Error ? err.message : \"Error desconocido\"\n        });\n    }\n    console.log(\"\\uD83D\\uDCCA Resultados del diagn\\xf3stico:\", tests);\n    return tests;\n}\n// Función para crear una política temporal de RLS\nasync function createPCAPolicy() {\n    console.log(\"\\uD83D\\uDD27 Intentando crear pol\\xedtica de acceso para PCA...\");\n    try {\n        // Intentamos ejecutar un comando SQL para crear una política\n        const { data, error } = await supabase.rpc(\"create_pca_policy\");\n        return {\n            success: !error,\n            error: error === null || error === void 0 ? void 0 : error.message\n        };\n    } catch (err) {\n        return {\n            success: false,\n            error: err instanceof Error ? err.message : \"Error desconocido\"\n        };\n    }\n}\n// Función para obtener todos los leads (números únicos con su información más reciente)\nasync function getLeads() {\n    console.log(\"\\uD83D\\uDCDE Obteniendo todos los leads...\");\n    // Primero obtenemos todas las calls\n    const { data: callsData, error: callsError } = await supabase.from(\"calls\").select(\"*\").not(\"to_number\", \"is\", null).order(\"call_id\", {\n        ascending: false\n    });\n    if (callsError) {\n        console.error(\"❌ Error obteniendo calls:\", callsError);\n        throw callsError;\n    }\n    if (!callsData) return [];\n    // Obtener todas las dispositions del PCA para los call_ids\n    const callIds = callsData.map((call)=>call.call_id);\n    const { data: pcaData } = await supabase.from(\"pca\").select(\"call_id, disposition\").in(\"call_id\", callIds);\n    // Crear un mapa para acceso rápido a las dispositions del PCA\n    const pcaMap = new Map();\n    if (pcaData) {\n        pcaData.forEach((pca)=>{\n            pcaMap.set(pca.call_id, pca.disposition);\n        });\n    }\n    const data = callsData;\n    // Agrupamos por to_number y tomamos la información más reciente\n    const leadsMap = new Map();\n    for (const call of data){\n        if (!call.to_number) continue;\n        const existingLead = leadsMap.get(call.to_number);\n        if (!existingLead) {\n            // Primera vez que vemos este número\n            leadsMap.set(call.to_number, {\n                phone_number: call.to_number,\n                business_name: call.business_name,\n                owner_name: call.owner_name,\n                owner_email: call.owner_email,\n                location_type: call.location_type,\n                address_street: call.address_street,\n                address_city: call.address_city,\n                address_state: call.address_state,\n                address_zip: call.address_zip,\n                total_calls: 1,\n                last_call_date: call.call_id,\n                last_disposition: pcaMap.get(call.call_id) || call.disposition,\n                agreed_amount: call.agreed_amount\n            });\n        } else {\n            // Actualizamos el conteo\n            existingLead.total_calls++;\n            // Si esta llamada es más reciente (call_id mayor), actualizamos la info\n            if (call.call_id > existingLead.last_call_date) {\n                existingLead.business_name = call.business_name || existingLead.business_name;\n                existingLead.owner_name = call.owner_name || existingLead.owner_name;\n                existingLead.owner_email = call.owner_email || existingLead.owner_email;\n                existingLead.location_type = call.location_type || existingLead.location_type;\n                existingLead.address_street = call.address_street || existingLead.address_street;\n                existingLead.address_city = call.address_city || existingLead.address_city;\n                existingLead.address_state = call.address_state || existingLead.address_state;\n                existingLead.address_zip = call.address_zip || existingLead.address_zip;\n                existingLead.last_call_date = call.call_id;\n                existingLead.last_disposition = pcaMap.get(call.call_id) || call.disposition;\n                existingLead.agreed_amount = call.agreed_amount || existingLead.agreed_amount;\n            }\n        }\n    }\n    const leads = Array.from(leadsMap.values());\n    console.log(\"✅ Encontrados \".concat(leads.length, \" leads \\xfanicos\"));\n    return leads;\n}\n// Función para obtener historial completo (calls + callbacks) por número de teléfono\nasync function getCallHistoryByPhone(phoneNumber) {\n    console.log(\"\\uD83D\\uDCDE Obteniendo historial completo para: \".concat(phoneNumber));\n    try {\n        // Obtener llamadas regulares\n        const { data: calls, error: callsError } = await supabase.from(\"calls\").select(\"*\").eq(\"to_number\", phoneNumber).order(\"call_id\", {\n            ascending: false\n        });\n        if (callsError) {\n            console.error(\"❌ Error obteniendo llamadas:\", callsError);\n            throw callsError;\n        }\n        console.log(\"\\uD83D\\uDCDE Encontradas \".concat((calls === null || calls === void 0 ? void 0 : calls.length) || 0, \" llamadas para \").concat(phoneNumber));\n        // Obtener callbacks para ese número\n        const { data: callbacks, error: callbacksError } = await supabase.from(\"callbacks\").select(\"*\").eq(\"to_number\", phoneNumber).order(\"created_at\", {\n            ascending: false\n        });\n        console.log(\"\\uD83D\\uDD04 Encontrados \".concat((callbacks === null || callbacks === void 0 ? void 0 : callbacks.length) || 0, \" callbacks para \").concat(phoneNumber));\n        if (callbacksError) {\n            console.error(\"❌ Error obteniendo callbacks:\", callbacksError);\n        // No lanzamos error, solo logueamos\n        }\n        // Obtener dispositions del PCA para las calls\n        let pcaMap = new Map();\n        let callbackMap = new Map();\n        if (calls && calls.length > 0) {\n            const callIds = calls.map((call)=>call.call_id);\n            // Obtener dispositions del PCA\n            const { data: pcaData } = await supabase.from(\"pca\").select(\"call_id, disposition\").in(\"call_id\", callIds);\n            if (pcaData) {\n                pcaData.forEach((pca)=>{\n                    pcaMap.set(pca.call_id, pca.disposition);\n                });\n            }\n            // Obtener callbacks asociados a estas calls\n            const { data: associatedCallbacks } = await supabase.from(\"callbacks\").select(\"*\").in(\"call_id\", callIds);\n            if (associatedCallbacks) {\n                associatedCallbacks.forEach((callback)=>{\n                    callbackMap.set(callback.call_id, callback);\n                });\n            }\n            console.log(\"\\uD83D\\uDD17 Calls con callbacks asociados: \".concat(Array.from(callbackMap.keys()).join(\", \")));\n        }\n        // Combinar y marcar el tipo\n        const allInteractions = [\n            // Procesar todas las calls y determinar si son callbacks\n            ...(calls || []).map((call)=>{\n                const pcaDisposition = pcaMap.get(call.call_id) || call.disposition;\n                const hasCallback = callbackMap.has(call.call_id);\n                const callbackData = callbackMap.get(call.call_id);\n                const result = {\n                    ...call,\n                    type: hasCallback ? \"callback\" : \"call\",\n                    date: call.call_id,\n                    display_date: call.call_id,\n                    disposition: pcaDisposition,\n                    // Si es callback, agregar info del callback\n                    ...hasCallback && callbackData ? {\n                        callback_time: callbackData.callback_time,\n                        callback_owner_name: callbackData.callback_owner_name,\n                        business_name: callbackData.callback_owner_name // Para callbacks, usar el nombre del owner\n                    } : {}\n                };\n                console.log(\"\".concat(hasCallback ? \"\\uD83D\\uDD04\" : \"\\uD83D\\uDCDE\", \" \").concat(hasCallback ? \"Callback\" : \"Call\", \" \").concat(call.call_id, ': disposition=\"').concat(pcaDisposition, '\", type=\"').concat(result.type, '\"'));\n                return result;\n            })\n        ];\n        // Ordenar por fecha (más recientes primero)\n        allInteractions.sort((a, b)=>{\n            if (a.date > b.date) return -1;\n            if (a.date < b.date) return 1;\n            return 0;\n        });\n        console.log(\"✅ Encontradas \".concat((calls === null || calls === void 0 ? void 0 : calls.length) || 0, \" llamadas (\").concat(Array.from(callbackMap.keys()).length, \" con callbacks) para \").concat(phoneNumber));\n        return allInteractions;\n    } catch (error) {\n        console.error(\"❌ Error obteniendo historial completo:\", error);\n        throw error;\n    }\n}\n// Función para contar cuántas llamadas tiene un número\nasync function getCallCountByPhone(phoneNumber) {\n    const { count, error } = await supabase.from(\"calls\").select(\"call_id\", {\n        count: \"exact\",\n        head: true\n    }).eq(\"to_number\", phoneNumber);\n    if (error) {\n        console.error(\"❌ Error contando llamadas:\", error);\n        return 0;\n    }\n    return count || 0;\n}\n// Función para verificar si una llamada tiene historial\nasync function hasCallHistory(callId) {\n    // Primero obtenemos el to_number de la llamada actual\n    const { data: callData, error: callError } = await supabase.from(\"calls\").select(\"to_number\").eq(\"call_id\", callId).single();\n    if (callError || !(callData === null || callData === void 0 ? void 0 : callData.to_number)) {\n        return {\n            hasHistory: false,\n            count: 0\n        };\n    }\n    const phoneNumber = callData.to_number;\n    const count = await getCallCountByPhone(phoneNumber);\n    return {\n        hasHistory: count > 1,\n        count,\n        phoneNumber\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});